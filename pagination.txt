<template>
  <nav>
    <ul class="pagination">
      <li :class="{'disabled': current == 1}"><a href="javascript:;" @click="setCurrent(current - 1)"> « </a></li>
      <li :class="{'disabled': current == 1}"><a href="javascript:;" @click="setCurrent(1)"> 首页 </a></li>
      <li v-for="p in grouplist" :class="{'active': current == p.val}"><a href="javascript:;" @click="setCurrent(p.val)"> {{ p.text }} </a>
      </li>
      <li :class="{'disabled': current == page}"><a href="javascript:;" @click="setCurrent(page)"> 尾页 </a></li>
      <li :class="{'disabled': current == page}"><a href="javascript:;" @click="setCurrent(current + 1)"> »</a></li>
    </ul>
  </nav>
</template>

<script type="es6">
  export default{
    data(){
      return {
        current: this.currentPage
      }
    },
    props: {
      total: {// 数据总条数
        type: Number,
        default: 0
      },
      currentPage: {// 当前页码
        type: Number,
        default: 1
      },
      pagegroup: {// 分页号
        type: Number,
        default: 3, //默认显示3个分页号
        coerce: function (v) {
          v = v > 0 ? v : 3;
          return v % 2 === 1 ? v : v + 1;
        }
      }
    },
    computed: {
      page: function () { // 总页数
        return this.total;
      },
      grouplist: function () { // 获取分页页码
        var len = this.page, 
        temp = [], list = [], 
        count = Math.floor(this.pagegroup / 2), 
        center = this.current;
        if (len <= this.pagegroup) {
          while (len--) {
            temp.push({text: this.page - len, val: this.page - len});
          }
          ;
          return temp;
        }
        while (len--) {
          temp.push(this.page - len);
        }
        ;
        var idx = temp.indexOf(center);
        (idx < count) && ( center = center + count - idx);
        (this.current > this.page - count) && ( center = this.page - count);
        temp = temp.splice(center - count - 1, this.pagegroup);
        do {
          var t = temp.shift();
          list.push({
            text: t,
            val: t
          });
        } while (temp.length);
        if (this.page > this.pagegroup) {
          (this.current > count + 1) && list.unshift({text: '...', val: list[0].val - 1});
          (this.current < this.page - count) && list.push({text: '...', val: list[list.length - 1].val + 1});
        }
        return list;
      }
    },
    methods:{
      setCurrent: function (idx) {
        if (this.current != idx && idx > 0 && idx < this.page + 1) {
          this.current = idx;
          this.$emit('pagechange', this.current);   //这里触发父组件的事件
        }
      }
    }
  }
</script>

<style scoped>
.pagination {
    width: 100%;
    position: fixed;
    bottom: 10rem;
    overflow: hidden;
    display: table;
    margin: 0 10%;
    height: 50px;
    bottom: 2rem;
}
.pagination li {
  list-style: none;
  float: left;
  height: 30px;
  border-radius: 5px;
  margin: 3px;
  color: #666;
}
.pagination li:hover {
  background: #000;
}
.pagination li:hover a {
  color: #fff;
}
.pagination li a{
  display: block;
  width: 30px;
  height: 30px;
  text-align: center;
  line-height: 30px;
  font-size: 12px;
  border-radius: 5px;
  text-decoration: none;
}
.pagination .active {
  background: #000;
}
.active a {
  color: #fff;
}
</style>

//父组件调用
<template>
// 这里写自己其他html元素
	<v-pagination  v-if="total>0" ref="child" :total="total" :current-page='curPage' @pagechange="pagechange"></v-pagination>
</template>
<script>
	data(){
		return {
			total: 0  //总条数
		}
	},
	methods: {
		pagechange:function(currentPage){
             // ajax请求, 向后台发送 currentPage当前页码, 来获取对应的数据
            this.$http({   //这里的$http需要先定义,用的是axios,Vue.prototype.$http = axios
                url: 'url',  //请求的后台地址
                method: 'GET',
                params: {
                    p: currentPage-1
                }
            }).then((res) => {
				//这里写成功后的逻辑
            })
        }
	},
    components: {
          'v-pagination': pagination,
    }
</script>